// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;

namespace DABMandatory2.Migrations
{
    [DbContext(typeof(BlackBoardContext))]
    partial class BlackBoardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DABMandatory2.Entities.Assignments", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assignment_ID")
                        .HasMaxLength(255);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<int>("Grade");

                    b.Property<int>("GroupSize");

                    b.Property<bool>("Passed");

                    b.Property<DateTime>("TIMESTAMP");

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.HasKey("AU_ID", "Assignment_ID");

                    b.HasIndex("Course_ID");

                    b.HasIndex("Teacher_ID");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            AU_ID = "au590761",
                            Assignment_ID = "EFCore",
                            Course_ID = "I4DAB",
                            Grade = 7,
                            GroupSize = 4,
                            Passed = true,
                            TIMESTAMP = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Teacher_ID = "Henrik"
                        },
                        new
                        {
                            AU_ID = "au590761",
                            Assignment_ID = "ATMS",
                            Course_ID = "I4SWT",
                            Grade = 12,
                            GroupSize = 4,
                            Passed = true,
                            TIMESTAMP = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Teacher_ID = "Troels"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Calendar", b =>
                {
                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Calendar_ID", "Course_ID");

                    b.HasIndex("Course_ID")
                        .IsUnique();

                    b.ToTable("Calendars");

                    b.HasData(
                        new
                        {
                            Calendar_ID = "calendarid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.ContentArea", b =>
                {
                    b.Property<string>("ContentArea_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Folder_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<string>("Audio")
                        .HasMaxLength(50);

                    b.Property<string>("Group_Signup")
                        .HasMaxLength(50);

                    b.Property<string>("Text_Block")
                        .HasMaxLength(100);

                    b.Property<string>("Video")
                        .HasMaxLength(50);

                    b.HasKey("ContentArea_ID", "Folder_ID", "Content_ID", "Course_ID");

                    b.HasIndex("Folder_ID", "Content_ID", "Course_ID");

                    b.ToTable("ContentAreas");

                    b.HasData(
                        new
                        {
                            ContentArea_ID = "contentareaid",
                            Folder_ID = "folderid",
                            Content_ID = "contentid",
                            Course_ID = "I4DAB",
                            Audio = "audio.wav",
                            Group_Signup = "www.signup.com",
                            Text_Block = "textblock",
                            Video = "video.mp4"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Course", b =>
                {
                    b.Property<string>("Course_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.HasKey("Course_ID");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Course_ID = "I4DAB"
                        },
                        new
                        {
                            Course_ID = "I4SWT"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseContent", b =>
                {
                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Content_ID", "Course_ID");

                    b.HasIndex("Course_ID")
                        .IsUnique();

                    b.ToTable("CourseContents");

                    b.HasData(
                        new
                        {
                            Content_ID = "contentid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseResponsible", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assistant_Or_Responsible")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasDefaultValue("Responsible");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID", "Teacher_ID");

                    b.HasIndex("Teacher_ID")
                        .IsUnique();

                    b.ToTable("CourseResponsibles");

                    b.HasData(
                        new
                        {
                            AU_ID = "auid",
                            Teacher_ID = "Henrik",
                            Birthday = new DateTime(2000, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andy Frækkesen"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Deadlines", b =>
                {
                    b.Property<DateTime>("DeadlineDate");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("DeadlineDate", "Calendar_ID", "Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("Deadlines");

                    b.HasData(
                        new
                        {
                            DeadlineDate = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Calendar_ID = "calendarid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Folder", b =>
                {
                    b.Property<string>("Folder_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Folder_ID", "Content_ID", "Course_ID");

                    b.HasIndex("Content_ID", "Course_ID");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Folder_ID = "folderid",
                            Content_ID = "contentid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.HandIns", b =>
                {
                    b.Property<DateTime>("HandinDate");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("HandinDate", "Calendar_ID", "Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("HandIns");

                    b.HasData(
                        new
                        {
                            HandinDate = new DateTime(2020, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Calendar_ID = "calendarid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsAssignedTo", b =>
                {
                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Teacher_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("IsAssignedTos");

                    b.HasData(
                        new
                        {
                            Teacher_ID = "Henrik",
                            Course_ID = "I4DAB"
                        },
                        new
                        {
                            Teacher_ID = "Troels",
                            Course_ID = "I4SWT"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsEnrolledTo", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<bool>("ActiveOrPassed");

                    b.Property<int>("Grade");

                    b.HasKey("AU_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("IsEnrolledTos");

                    b.HasData(
                        new
                        {
                            AU_ID = "au590761",
                            Course_ID = "I4DAB",
                            ActiveOrPassed = true,
                            Grade = 12
                        },
                        new
                        {
                            AU_ID = "au590761",
                            Course_ID = "I4SWT",
                            ActiveOrPassed = true,
                            Grade = 2
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.LectureDates", b =>
                {
                    b.Property<DateTime>("Lecture");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Lecture", "Calendar_ID", "Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("LectureDates");

                    b.HasData(
                        new
                        {
                            Lecture = new DateTime(2021, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Calendar_ID = "calendarid",
                            Course_ID = "I4DAB"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Student", b =>
                {
                    b.Property<string>("AU_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("EnrollmentDate");

                    b.Property<DateTime>("GraduationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            AU_ID = "au590761",
                            Birthday = new DateTime(1997, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentDate = new DateTime(2017, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduationDate = new DateTime(2021, 1, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Andy"
                        },
                        new
                        {
                            AU_ID = "au000000",
                            Birthday = new DateTime(1900, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EnrollmentDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GraduationDate = new DateTime(2100, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Falsk studerende"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Teacher", b =>
                {
                    b.Property<string>("Teacher_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<string>("AssistantOrResponsible")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Teacher_ID");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Teacher_ID = "Troels",
                            AssistantOrResponsible = "Assistant"
                        },
                        new
                        {
                            Teacher_ID = "Henrik",
                            AssistantOrResponsible = "Responsible"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.TeachingAssistant", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assistant_Or_Responsible")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasDefaultValue("Assistant");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID", "Teacher_ID");

                    b.HasIndex("Teacher_ID")
                        .IsUnique();

                    b.ToTable("TeachingAssistants");

                    b.HasData(
                        new
                        {
                            AU_ID = "au123456",
                            Teacher_ID = "Troels",
                            Birthday = new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Troels"
                        });
                });

            modelBuilder.Entity("DABMandatory2.Entities.Assignments", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Student", "Student")
                        .WithMany("Assignments")
                        .HasForeignKey("AU_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Teacher", "Teacher")
                        .WithMany("Assignments")
                        .HasForeignKey("Teacher_ID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Calendar", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithOne("Calendar")
                        .HasForeignKey("DABMandatory2.Entities.Calendar", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.ContentArea", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Folder", "Folder")
                        .WithMany("ContentAreas")
                        .HasForeignKey("Folder_ID", "Content_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseContent", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithOne("CourseContent")
                        .HasForeignKey("DABMandatory2.Entities.CourseContent", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseResponsible", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Teacher", "Teacher")
                        .WithOne("CourseResponsible")
                        .HasForeignKey("DABMandatory2.Entities.CourseResponsible", "Teacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Deadlines", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("Deadlines")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Folder", b =>
                {
                    b.HasOne("DABMandatory2.Entities.CourseContent", "CourseContent")
                        .WithMany("Folders")
                        .HasForeignKey("Content_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.HandIns", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("Handins")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsAssignedTo", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("IsAssignedTos")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Teacher", "Teacher")
                        .WithMany("IsAssignedTos")
                        .HasForeignKey("Teacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsEnrolledTo", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("AU_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.LectureDates", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("LectureDates")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.TeachingAssistant", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Teacher", "Teacher")
                        .WithOne("TeachingAssistant")
                        .HasForeignKey("DABMandatory2.Entities.TeachingAssistant", "Teacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
