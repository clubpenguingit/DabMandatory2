// <auto-generated />
using System;
using DABMandatory2;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DABMandatory2.Migrations
{
    [DbContext(typeof(BlackBoardContext))]
    partial class BlackBoardContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DABMandatory2.Entities.Assignments", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assignment_ID")
                        .HasMaxLength(255);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<int>("Grade");

                    b.Property<int>("GroupSize");

                    b.Property<bool>("Passed");

                    b.Property<DateTime>("TIMESTAMP");

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.HasKey("AU_ID", "Assignment_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Calendar", b =>
                {
                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Calendar_ID", "Course_ID");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("DABMandatory2.Entities.ContentArea", b =>
                {
                    b.Property<string>("ContentArea_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Folder_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<string>("Audio")
                        .HasMaxLength(50);

                    b.Property<string>("Group_Signup")
                        .HasMaxLength(50);

                    b.Property<string>("Text_Block")
                        .HasMaxLength(100);

                    b.Property<string>("Video")
                        .HasMaxLength(50);

                    b.HasKey("ContentArea_ID", "Folder_ID", "Content_ID", "Course_ID");

                    b.HasIndex("Folder_ID", "Content_ID", "Course_ID");

                    b.ToTable("ContentAreas");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Course", b =>
                {
                    b.Property<string>("Course_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100);

                    b.Property<string>("CalendarCourse_ID")
                        .IsRequired();

                    b.Property<string>("Calendar_ID")
                        .IsRequired();

                    b.Property<string>("CourseContentContent_ID");

                    b.Property<string>("CourseContentCourse_ID");

                    b.HasKey("Course_ID");

                    b.HasIndex("Calendar_ID", "CalendarCourse_ID")
                        .IsUnique();

                    b.HasIndex("CourseContentContent_ID", "CourseContentCourse_ID")
                        .IsUnique()
                        .HasFilter("[CourseContentContent_ID] IS NOT NULL AND [CourseContentCourse_ID] IS NOT NULL");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseContent", b =>
                {
                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Content_ID", "Course_ID");

                    b.ToTable("CourseContents");
                });

            modelBuilder.Entity("DABMandatory2.Entities.CourseResponsible", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assistant_Or_Responsible")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasDefaultValue("Responsible");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID", "Teacher_ID");

                    b.ToTable("CourseResponsibles");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Deadlines", b =>
                {
                    b.Property<DateTime>("DeadlineDate");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("DeadlineDate", "Calendar_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("Deadlines");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Folder", b =>
                {
                    b.Property<string>("Folder_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Content_ID")
                        .HasMaxLength(50);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Folder_ID", "Content_ID", "Course_ID");

                    b.HasIndex("Content_ID", "Course_ID");

                    b.ToTable("Folders");
                });

            modelBuilder.Entity("DABMandatory2.Entities.HandIns", b =>
                {
                    b.Property<DateTime>("HandinDate");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("HandinDate", "Calendar_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("HandIns");
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsAssignedTo", b =>
                {
                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Teacher_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("IsAssignedTos");
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsEnrolledTo", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.Property<bool>("ActiveOrPassed");

                    b.HasKey("AU_ID", "Course_ID");

                    b.HasIndex("Course_ID");

                    b.ToTable("IsEnrolledTos");
                });

            modelBuilder.Entity("DABMandatory2.Entities.LectureDates", b =>
                {
                    b.Property<DateTime>("Lecture");

                    b.Property<string>("Calendar_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Course_ID")
                        .HasMaxLength(100);

                    b.HasKey("Lecture", "Calendar_ID", "Course_ID");

                    b.HasIndex("Calendar_ID", "Course_ID");

                    b.ToTable("LectureDates");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Student", b =>
                {
                    b.Property<string>("AU_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<DateTime>("Birthday");

                    b.Property<DateTime>("EnrollmentDate");

                    b.Property<DateTime>("GraduationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Teacher", b =>
                {
                    b.Property<string>("Teacher_ID")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10);

                    b.Property<string>("AssignmentsAU_ID");

                    b.Property<string>("AssignmentsAssignment_ID");

                    b.Property<string>("AssistantOrResponsible")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("CourseResponsibleAU_ID");

                    b.Property<string>("CourseResponsibleTeacher_ID");

                    b.Property<string>("TeachingAssistantAU_ID");

                    b.Property<string>("TeachingAssistantTeacher_ID");

                    b.HasKey("Teacher_ID");

                    b.HasIndex("AssignmentsAU_ID", "AssignmentsAssignment_ID")
                        .IsUnique()
                        .HasFilter("[AssignmentsAU_ID] IS NOT NULL AND [AssignmentsAssignment_ID] IS NOT NULL");

                    b.HasIndex("CourseResponsibleAU_ID", "CourseResponsibleTeacher_ID")
                        .IsUnique()
                        .HasFilter("[CourseResponsibleAU_ID] IS NOT NULL AND [CourseResponsibleTeacher_ID] IS NOT NULL");

                    b.HasIndex("TeachingAssistantAU_ID", "TeachingAssistantTeacher_ID")
                        .IsUnique()
                        .HasFilter("[TeachingAssistantAU_ID] IS NOT NULL AND [TeachingAssistantTeacher_ID] IS NOT NULL");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("DABMandatory2.Entities.TeachingAssistant", b =>
                {
                    b.Property<string>("AU_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Teacher_ID")
                        .HasMaxLength(10);

                    b.Property<string>("Assistant_Or_Responsible")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(15)
                        .HasDefaultValue("Assistant");

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("AU_ID", "Teacher_ID");

                    b.ToTable("TeachingAssistants");
                });

            modelBuilder.Entity("DABMandatory2.Entities.Assignments", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Student", "Student")
                        .WithMany("Assignments")
                        .HasForeignKey("AU_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.ContentArea", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Folder", "Folder")
                        .WithMany("ContentAreas")
                        .HasForeignKey("Folder_ID", "Content_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Course", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithOne("Course")
                        .HasForeignKey("DABMandatory2.Entities.Course", "Calendar_ID", "CalendarCourse_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.CourseContent", "CourseContent")
                        .WithOne("Course")
                        .HasForeignKey("DABMandatory2.Entities.Course", "CourseContentContent_ID", "CourseContentCourse_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Deadlines", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course")
                        .WithMany("Deadlines")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("Deadlines")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Folder", b =>
                {
                    b.HasOne("DABMandatory2.Entities.CourseContent", "CourseContent")
                        .WithMany("Folders")
                        .HasForeignKey("Content_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.HandIns", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course")
                        .WithMany("HandIns")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("Handins")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsAssignedTo", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("IsAssignedTos")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Teacher", "Teacher")
                        .WithMany("IsAssignedTos")
                        .HasForeignKey("Teacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.IsEnrolledTo", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("AU_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.LectureDates", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Calendar", "Calendar")
                        .WithMany("LectureDates")
                        .HasForeignKey("Calendar_ID", "Course_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DABMandatory2.Entities.Teacher", b =>
                {
                    b.HasOne("DABMandatory2.Entities.Assignments", "Assignments")
                        .WithOne("Teacher")
                        .HasForeignKey("DABMandatory2.Entities.Teacher", "AssignmentsAU_ID", "AssignmentsAssignment_ID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DABMandatory2.Entities.CourseResponsible", "CourseResponsible")
                        .WithOne("Teacher")
                        .HasForeignKey("DABMandatory2.Entities.Teacher", "CourseResponsibleAU_ID", "CourseResponsibleTeacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DABMandatory2.Entities.TeachingAssistant", "TeachingAssistant")
                        .WithOne("Teacher")
                        .HasForeignKey("DABMandatory2.Entities.Teacher", "TeachingAssistantAU_ID", "TeachingAssistantTeacher_ID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
